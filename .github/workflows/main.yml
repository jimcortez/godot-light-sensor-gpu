name: Main

on:
  push:
    paths-ignore:
      - '.gitignore'
      - '*.md'
  pull_request:
    paths-ignore:
      - '.gitignore'
      - '*.md'

jobs:
  lint:
    name: üßπ Lint / üìú C++
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Run clang-format style check
        uses: jidicula/clang-format-action@v4.9.0
        with:
          clang-format-version: '15'
          exclude-regex: 'extern'

  build:
    strategy:
      fail-fast: false
      matrix:
        build_type: ['Debug', 'Release']
        config:
          - { name: 'üçè macOS Clang', short-name: 'macOS', os: macos-latest }
          - { name: 'üêß Linux GCC', short-name: 'Linux', os: ubuntu-latest }
          - {
              name: 'ü™ü Windows MSVC',
              short-name: 'Windows',
              os: windows-latest,
            }

    name: üõ† Build / ${{ matrix.config.name }} (${{ matrix.build_type }})
    runs-on: ${{ matrix.config.os }}
    
    env:
      # Limit parallel jobs to prevent system overload
      CMAKE_BUILD_PARALLEL_LEVEL: 8

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Dependencies (macOS)
        if: matrix.config.os == 'macos-latest'
        run: brew install ccache

      - name: Install Dependencies (Linux)
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache ninja-build

      - name: Install Dependencies (Windows)
        if: matrix.config.os == 'windows-latest'
        run: |
          choco upgrade ccache ninja

      - name: Setup MSVC (Windows)
        if: matrix.config.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: '10G'
          key: ${{ matrix.config.os }}-${{ matrix.build_type }}

      - name: Show build configuration
        run: |
          echo "Build configuration:"
          echo "  OS: ${{ matrix.config.os }}"
          echo "  Build Type: ${{ matrix.build_type }}"
          echo "  Parallel Jobs: ${{ env.CMAKE_BUILD_PARALLEL_LEVEL }}"
          echo "  CMake Version: $(cmake --version | head -n1)"

      - name: Configure (macOS/Linux)
        if: matrix.config.os != 'windows-latest'
        run: |
          cmake -B gotdot-light-sensor-gpu-${{ matrix.build_type }} \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/gotdot-light-sensor-gpu-${{ matrix.build_type }}-install \
                .

      - name: Configure (Windows)
        if: matrix.config.os == 'windows-latest'
        run: |
          cmake -B gotdot-light-sensor-gpu-${{ matrix.build_type }} \
                -G "Visual Studio 17 2022" \
                -A x64 \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/gotdot-light-sensor-gpu-${{ matrix.build_type }}-install \
                .

      - name: Build
        run: cmake --build gotdot-light-sensor-gpu-${{ matrix.build_type }} --parallel 8

      - name: Install
        run: cmake --install gotdot-light-sensor-gpu-${{ matrix.build_type }}

      - name: Upload artifact (Debug)
        if: matrix.build_type == 'Debug'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.config.short-name }}-Debug
          path: |
            ${{ github.workspace }}/gotdot-light-sensor-gpu-Debug-install/*

      - name: Upload artifact (Release)
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.config.short-name }}-Release
          path: |
            ${{ github.workspace }}/gotdot-light-sensor-gpu-Release-install/*
